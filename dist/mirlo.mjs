function domAddEventListener (event_name, selector, callback) {
  document.querySelectorAll(selector).forEach(dom_el => {
    dom_el.addEventListener(event_name, callback);
  });
}

function domRemoveEventListener (event_name, selector, callback) {
  document.querySelectorAll(selector).forEach(dom_el => {
    dom_el.removeEventListener(event_name, callback);
  });
}

function domGetData (dom_el) {
  if (!Object.hasOwn(dom_el, 'mirlo')) {
    dom_el.mirlo = {};
  }
  return dom_el.mirlo;
}

class Component {
  useServices = [];
  fetchData = {};
  data = {};
  #parent = null;
  #childrens = [];

  constructor(parent, target, options) {
    // Force 'requests' service
    if (this.useServices.indexOf('requests') === -1) {
      this.useServices.push('requests');
    }
    this.options = options || {};
    this.setParent(parent);
    this.setElement(target);
  }

  onWillStart() {
    const tasks = [];
    for (const data_key in this.fetchData) {
      tasks.push(
        this.requests
          .postJSON(
            this.fetchData[data_key].endpoint,
            this.fetchData[data_key].data,
          )
          .then(result => {
            this.data[data_key] = result;
            return result;
          }),
      );
    }
    return Promise.all(tasks);
  }

  onStart() {
    for (const cevent in this.events) {
      const [event_name, ...event_rest] = cevent.split(' ');
      const event_target = (event_rest && event_rest.join(' ')) || null;
      const dom_target =
        (event_target && this.query(event_target)) || this.dom_el;
      dom_target.addEventListener(event_name, this.events[cevent].bind(this));
    }
  }

  destroy() {
    if (this.#parent) {
      this.#parent.removeChildren(this);
    }
    for (const children of this.#childrens) {
      children.destroy();
    }
    this.#childrens = [];
    for (const cevent in this.events) {
      const [event_name, ...event_rest] = cevent.split(' ');
      const event_target = (event_rest && event_rest.join(' ')) || null;
      const dom_target =
        (event_target && this.query(event_target)) || this.dom_el;
      dom_target.removeEventListener(
        event_name,
        this.events[cevent].bind(this),
      );
    }
  }

  /**
   * @param {Component} parent
   */
  setParent(parent) {
    this.#parent = parent;
    if (this.#parent) {
      this.#parent.addChildren(this);
    }
  }

  /**
   * @returns {Component}
   */
  getParent() {
    return this.#parent;
  }

  addChildren(component) {
    this.#childrens.push(component);
  }

  removeChildren(component) {
    this.#childrens = this.#childrens.filter(item => item !== component);
  }

  setElement(target) {
    this.dom_el = target;
  }

  queryAll(selector) {
    return this.dom_el.querySelectorAll(selector);
  }
  query(selector) {
    return this.dom_el.querySelector(selector);
  }
}

/** Boot Mirlo **/
class App extends Component {
  #registry = {
    components: {},
    services: {},
  };
  #services = {};

  constructor(parent, target, options, internal_data) {
    super(parent, target, options);
    this.__data = internal_data;
  }

  destroy() {
    super.destroy();
    const services = Object.values(this.#services);
    for (const service of services) {
      service.destroy();
    }
    this.#services = [];
    domRemoveEventListener('click', "[class~='dropdown']");
    domRemoveEventListener('click', '[data-dismiss]');
  }

  registerComponent(name, component) {
    if (Object.hasOwn(this.#registry.components, name)) {
      console.warn(`Already exists a component called '${name}'!`);
      return;
    }
    this.#registry.components[name] = component;
  }
  getComponentClass(name) {
    return this.#registry.components[name];
  }
  invokeComponent(name, ...args) {
    const component_cls = this.getComponentClass(name);
    if (component_cls) {
      const component = new component_cls(this, ...args);
      this.#assignServices(component);
      component.onWillStart().then(() => {
        component.onStart();
      });
    } else {
      console.warn(`The component '${name}' don't exists!`);
    }
  }

  registerService(name, service, force = false) {
    if (Object.hasOwn(this.#registry.services, name) && !force) {
      console.warn(`Already exists a service called '${name}'!`);
      return;
    }
    this.#registry.services[name] = service;
  }
  getServiceClass(name) {
    return this.#registry.services[name];
  }
  getService(name) {
    return this.#services[name];
  }

  onWillStart() {
    return super
      .onWillStart()
      .then(() => {
        return this.#initializeServices();
      })
      .then(() => {
        return this.#initializeComponents();
      });
  }

  onStart() {
    super.onStart();
    // Assign core event
    domAddEventListener(
      'click',
      "[class~='dropdown']",
      this.#onCoreClickDropdown.bind(this),
    );
    domAddEventListener(
      'click',
      '[data-dismiss]',
      this.#onCoreClickDismiss.bind(this),
    );
  }

  #initializeServices() {
    for (const service_name in this.#registry.services) {
      this.#services[service_name] = new this.#registry.services[
        service_name
      ]();
    }
    const tasks = [];
    const service_names = Object.keys(this.#services);
    for (const service_name of service_names) {
      const service = this.#services[service_name];
      tasks.push(service.onWillStart());
    }
    return Promise.all(tasks);
  }

  #initializeComponents() {
    const tasks = [];
    const components = this.queryAll('[data-component]');
    for (const dom_elm of components) {
      const dom_elm_data = domGetData(dom_elm);
      if (Object.hasOwn(dom_elm_data, 'component_obj')) {
        continue;
      }
      const component_name = dom_elm.dataset.component;
      const component_cls = this.getComponentClass(component_name);
      const parent_component = dom_elm.closest('[data-component]');
      const dom_parent_elm_data = domGetData(parent_component);
      const parent_component_cls =
        parent_component && dom_parent_elm_data.component_obj;
      const component_options = {};
      Object.keys(dom_elm_data).forEach(optionName => {
        if (optionName.startsWith('componentOption')) {
          const componentOptionName = optionName
            .replace(/^componentOption/, '')
            .toLowerCase();
          component_options[componentOptionName] = dom_elm_data[optionName];
        }
      });
      if (component_cls) {
        const component = new component_cls(
          parent_component_cls || this,
          dom_elm,
          component_options,
        );
        this.#assignServices(component);
        Object.assign(dom_elm_data, {component_obj: component});
        tasks.push(
          component.onWillStart().then(() => {
            component.onStart();
          }),
        );
      } else {
        console.warn(`Can't found the '${component_name}' component!`, dom_elm);
      }
    }

    return Promise.all(tasks);
  }

  #assignServices(component) {
    for (const service_name of component.useServices) {
      component[service_name] = this.#services[service_name];
    }
  }

  #onCoreClickDropdown(ev) {
    this.query(ev.currentTarget.dataset.target).classList.toggle('hidden');
  }

  #onCoreClickDismiss(ev) {
    const classname = `.${ev.currentTarget.datatset.dismiss}`;
    ev.currentTarget.closest(classname).remove();
  }
}

const app = new App(null, document.body);

class Service {
  onWillStart() {
    return Promise.resolve();
  }

  destroy() {
    throw Error('Not Implemented!');
  }
}

class StorageService extends Service {
  storage = null;

  getItem(item) {
    return (
      (this.storage && JSON.parse(this.storage.getItem(item))) || undefined
    );
  }

  setItem(item, value, on_error) {
    try {
      return this.storage.setItem(item, JSON.stringify(value));
    } catch (err) {
      console.error(
        `[StorageService] Can't set the item '${item}' = '${value}'`,
      );
      if (on_error) {
        const err_check = this.#isQuotaExceededError(err);
        if (err_check) {
          on_error(err);
        }
      }
    }

    return false;
  }

  removeItem(item) {
    return (this.storage && this.storage.removeItem(item)) || undefined;
  }

  #isQuotaExceededError(err) {
    return err.name === 'QuotaExceededError';
  }
}

class LocalStorageService extends StorageService {
  storage = localStorage;
}

class SessionStorageService extends StorageService {
  storage = sessionStorage;
}

class RequestsService extends Service {
  MESSAGES = {
    e200: '200: Invalid server result!',
  };

  getHeaders(custom_headers) {
    return custom_headers;
  }

  async postJSON(url, data) {
    const response = await fetch(url, {
      method: 'POST',
      mode: 'same-origin',
      cache: 'no-cache',
      credentials: 'same-origin',
      headers: this.getHeaders({
        'Content-Type': 'application/json',
      }),
      redirect: 'follow',
      referrerPolicy: 'same-origin',
      body: JSON.stringify(data),
    });
    const result = response.json();
    if (this.checkServerResult(result)) {
      return result;
    }
    throw Error(this.MESSAGES.e200);
  }

  async post(url, data, cache = 'default') {
    let fdata = false;
    if (typeof data === 'object') {
      fdata = new URLSearchParams();
      for (const k in data) {
        fdata.append(k, data[k]);
      }
    } else if (typeof data === 'string') {
      fdata = data;
    }
    const response = await fetch(url, {
      method: 'POST',
      mode: 'same-origin',
      cache: cache,
      credentials: 'same-origin',
      headers: this.getHeaders({
        'Content-Type': 'application/x-www-form-urlencoded',
      }),
      redirect: 'follow',
      referrerPolicy: 'same-origin',
      body: fdata,
    });
    const result = response.json();
    if (this.checkServerResult(result)) {
      return result;
    }
    throw Error(this.MESSAGES.e200);
  }

  async get(url, cache = 'default') {
    const response = await fetch(url, {
      method: 'GET',
      mode: 'same-origin',
      cache: cache,
      credentials: 'same-origin',
      headers: this.getHeaders(),
      redirect: 'follow',
      referrerPolicy: 'same-origin',
    });
    return response.blob();
  }

  checkServerResult(data) {
    if (!data || typeof data === 'undefined') {
      return true;
    }
  }
}

// Copyright (C) 2022 Alexandre Díaz

app.registerService('requests', RequestsService);
app.registerService('localStorage', LocalStorageService);
app.registerService('sessionStorage', SessionStorageService);

// On Start APP
window.addEventListener('load', () => {
  app.onWillStart().then(() => {
    app.onStart();
  });
});

export { Component, Service, app as default };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
